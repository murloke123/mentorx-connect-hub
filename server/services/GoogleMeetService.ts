// üéØ JITSI MEET - VERS√ÉO ULTRA SIMPLES
// Zero configura√ß√£o, zero API keys, zero complica√ß√£o!
// Apenas 1 fun√ß√£o para gerar link de reuni√£o instantaneamente!

/**
 * üöÄ FUN√á√ÉO PRINCIPAL - Criar link de reuni√£o Jitsi
 * 
 * @param nomeRoomCustomizado - Nome personalizado para a sala (opcional)
 * @returns string - URL completa da reuni√£o
 */
function criarLinkJitsi(nomeRoomCustomizado?: string): string {
  
  // PASSO 1: Definir se vai usar nome customizado ou gerar autom√°tico
  let roomId: string;
  
  if (nomeRoomCustomizado) {
    // PASSO 1A: Se passou nome customizado, limpar caracteres especiais
    const nomeProcessado = nomeRoomCustomizado
      .toLowerCase()                    // Converter para min√∫sculo
      .replace(/[^a-z0-9]/g, '')       // Remover caracteres especiais
      .substring(0, 30);               // Limitar a 30 caracteres
    
    // PASSO 1B: Adicionar timestamp para garantir unicidade
    const timestamp = Date.now().toString().slice(-6); // √öltimos 6 d√≠gitos
    roomId = `${nomeProcessado}-${timestamp}`;
  } else {
    // PASSO 1C: Gerar ID aleat√≥rio se n√£o passou nome
    const randomId = Math.random().toString(36).substring(2, 12); // ID aleat√≥rio
    const timestamp = Date.now().toString().slice(-6);
    roomId = `sala-${randomId}-${timestamp}`;
  }
  
  // PASSO 2: Construir URL final
  const linkCompleto = `https://meet.jit.si/${roomId}`;
  
  // PASSO 3: Retornar link pronto para usar
  return linkCompleto;
}

// ===== JITSI MEET SERVICE =====
class JitsiMeetService {
  
  constructor() {
    console.log('üöÄ [Jitsi] Servi√ßo inicializado - ZERO configura√ß√£o necess√°ria!');
  }

  // ===== FUN√á√ÉO PRINCIPAL - GERAR LINK JITSI =====
  criarLinkMeet(nomeCustomizado?: string): string {
    console.log('üé• [Jitsi] Gerando link da reuni√£o...');
    
    const link = criarLinkJitsi(nomeCustomizado);
    
    console.log('‚úÖ [Jitsi] Link gerado com sucesso!');
    console.log('üîó [Jitsi] Link:', link);
    
    return link;
  }

  // ===== TESTAR CONEX√ÉO =====
  async testarConexao() {
    console.log('üß™ [Jitsi] Testando gera√ß√£o de link...');
    
    try {
      const linkTeste = this.criarLinkMeet('teste-conexao');
      
      console.log('‚úÖ [Jitsi] Teste realizado com sucesso!');
      
      return {
        sucesso: true,
        linkTeste: linkTeste,
        mensagem: 'Jitsi funcionando perfeitamente - sem configura√ß√£o!',
        provider: 'Jitsi Meet'
      };
      
    } catch (error: any) {
      console.error('‚ùå [Jitsi] Erro no teste (improv√°vel):', error.message);
      return {
        sucesso: false,
        erro: error.message,
        mensagem: 'Falha no teste (muito improv√°vel com Jitsi)'
      };
    }
  }

  // ===== M√âTODO PARA COMPATIBILIDADE COM SISTEMA ATUAL =====
  async criarAgendamentoComMeet(dadosAgendamento: any) {
    console.log('üîÑ [Jitsi] Gerando link para agendamento...');
    console.log('üìù [Jitsi] Dados recebidos:', {
      mentor: dadosAgendamento.mentor?.nome,
      mentorado: dadosAgendamento.mentorado?.nome,
      dataInicio: dadosAgendamento.dataInicio
    });
    
    try {
      // Criar nome personalizado para a reuni√£o
      const nomeReuniao = `mentoria-${dadosAgendamento.mentor?.nome || 'mentor'}-${dadosAgendamento.mentorado?.nome || 'mentorado'}`;
      
      // Gerar link Jitsi
      const linkMeet = this.criarLinkMeet(nomeReuniao);
      
      // Retornar no formato esperado pelo sistema atual
      const resultado = {
        eventoId: `jitsi-${Date.now()}`, // ID √∫nico
        linkMeet: linkMeet,
        linkEvento: linkMeet, // Mesmo link
        titulo: `Mentoria: ${dadosAgendamento.mentor?.nome} & ${dadosAgendamento.mentorado?.nome}`,
        dataInicio: dadosAgendamento.dataInicio,
        dataFim: dadosAgendamento.dataFim,
        status: 'confirmed',
        provider: 'Jitsi Meet'
      };
      
      console.log('‚úÖ [Jitsi] Link gerado para agendamento!');
      console.log('üé• [Jitsi] Link:', linkMeet);
      
      return resultado;
      
    } catch (error: any) {
      console.error('‚ùå [Jitsi] Erro ao gerar link para agendamento:', error.message);
      throw error;
    }
  }

  // ===== EXEMPLOS E UTILIDADES =====
  
  // Gerar link e abrir automaticamente
  criarEAbrir(nome?: string): string {
    const link = this.criarLinkMeet(nome);
    console.log('üöÄ [Jitsi] Abrindo reuni√£o automaticamente...');
    // No servidor, apenas retorna o link. No frontend, usaria window.open
    return link;
  }
  
  // Gerar m√∫ltiplos links de uma vez
  criarMultiplosLinks(quantidade: number = 3): string[] {
    console.log(`üéØ [Jitsi] Gerando ${quantidade} links...`);
    
    const links: string[] = [];
    for (let i = 1; i <= quantidade; i++) {
      const link = this.criarLinkMeet(`reuniao-${i}`);
      links.push(link);
    }
    
    console.log(`‚úÖ [Jitsi] ${quantidade} links gerados!`);
    return links;
  }
  
  // Gerar link para evento espec√≠fico
  criarLinkEvento(evento: { nome: string, data: string, participantes?: string[] }): any {
    console.log('üìÖ [Jitsi] Criando link para evento:', evento.nome);
    
    const nomeEvento = `${evento.nome}-${evento.data.replace(/[^0-9]/g, '')}`;
    const link = this.criarLinkMeet(nomeEvento);
    
    return {
      evento: evento.nome,
      data: evento.data,
      link: link,
      participantes: evento.participantes || [],
      criadoEm: new Date().toISOString(),
      provider: 'Jitsi Meet'
    };
  }
}

// ===== HELPER FUNCTIONS =====

// Vers√£o ainda mais simples (1 linha s√≥!)
const linkRapido = (): string => `https://meet.jit.si/sala-${Date.now()}`;

// Objeto com fun√ß√µes √∫teis
export const jitsiSimples = {
  // Gerar link com nome personalizado
  criarComNome: (nome: string) => criarLinkJitsi(nome),
  
  // Gerar link autom√°tico
  criarAutomatico: () => criarLinkJitsi(),
  
  // Vers√£o ultra r√°pida
  criarRapido: linkRapido,
  
  // Gerar para mentoria espec√≠fica
  criarMentoria: (mentor: string, mentorado: string) => {
    const nome = `mentoria-${mentor}-${mentorado}`;
    return criarLinkJitsi(nome);
  }
};

// üìã EXEMPLOS DE USO:
console.log('üéØ Exemplos Jitsi:');
console.log('Link personalizado:', criarLinkJitsi('reuniao da equipe'));
console.log('Link autom√°tico:', criarLinkJitsi());
console.log('Link r√°pido:', linkRapido());
console.log('Link mentoria:', jitsiSimples.criarMentoria('Jo√£o', 'Maria'));

export default JitsiMeetService;
export { criarLinkJitsi };
