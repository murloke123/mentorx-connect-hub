import Stripe from "stripe";
import { config } from '../environment';

// ##########################################################################################
// ############ STRIPE SERVER CHECKOUT SERVICE - OPERA√á√ïES DE CHECKOUT ###################
// ##########################################################################################
// 
// üéØ RESPONSABILIDADE: Apenas opera√ß√µes relacionadas a checkout e sess√µes Stripe
// üìã INCLUI: Cria√ß√£o de sess√µes, processamento de sucessos, verifica√ß√£o de status
// ‚ùå N√ÉO INCLUI: Webhooks (ver stripePaymentsService.ts) ou produtos (ver stripeServerProductService.ts)
//
// üìö EDUCATIVO PARA DEV JUNIOR:
// - Este servi√ßo executa APENAS no backend/servidor
// - Usa a CHAVE SECRETA do Stripe (nunca exposta ao frontend)
// - Lida com sess√µes de checkout e transa√ß√µes monet√°rias
// - Todas as valida√ß√µes e processamentos cr√≠ticos s√£o feitos aqui
//
// ##########################################################################################

// Inicializar cliente Stripe com chave secreta do servidor
const stripe = new Stripe(config.STRIPE_SECRET_KEY, {
  apiVersion: '2025-05-28.basil',
  typescript: true,
});

// ##########################################################################################
// ###################### INTERFACES E TIPOS #############################################
// ##########################################################################################

export interface CreateCheckoutSessionData {
  accountId: string;
  priceId: string;
  courseId: string;
  buyerId: string;
  buyerEmail: string;
  mentorId: string;
  successUrl: string;
  cancelUrl: string;
}

export interface CheckoutSessionResult {
  success: boolean;
  sessionId?: string;
  sessionUrl?: string;
  transactionId?: string;
  error?: string;
}

export interface CheckoutSuccessData {
  sessionId: string;
  transactionId: string;
  accountId: string;
}

export interface CheckoutSuccessResult {
  success: boolean;
  transaction?: any;
  error?: string;
}

export interface PaymentStatusResult {
  success: boolean;
  isPaid: boolean;
  status: string;
  transaction?: any;
  error?: string;
}

// ##########################################################################################
// ################ SISTEMA DE LOGS PARA NETWORK DO CHROME ###############################
// ##########################################################################################

/**
 * üìä SISTEMA DE LOGS PARA NETWORK (Chrome DevTools)
 * 
 * üéØ OBJETIVO: Registrar todas as opera√ß√µes de checkout no Network do navegador
 * 
 * üìö EDUCATIVO: Logs aparecem na aba Network do DevTools para debug
 * 
 * üîç COMO VER OS LOGS:
 * 1. Abra Chrome DevTools (F12)
 * 2. V√° na aba "Network" 
 * 3. Procure por requisi√ß√µes "/api/stripe-network-logs"
 * 4. Clique para ver os dados enviados
 */
async function logToNetworkChrome(type: string, action: string, data: any): Promise<void> {
  try {
    await fetch('/api/stripe-network-logs', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        type,
        action,
        data,
        timestamp: new Date().toISOString(),
        service: 'stripeServerCheckoutService',
        location: 'backend'
      })
    });
  } catch (error) {
    // Falha silenciosa - logs n√£o devem quebrar o fluxo
  }
}

// ##########################################################################################
// ###################### M√âTODOS DE CHECKOUT ############################################
// ##########################################################################################

/**
 * Criar sess√£o de checkout no Stripe
 * 
 * üìö EDUCATIVO PARA DEV JUNIOR:
 * - accountId: ID da conta conectada do mentor (obrigat√≥rio)
 * - priceId: ID do pre√ßo Stripe do curso (obrigat√≥rio)
 * - Sess√µes s√£o criadas na conta conectada espec√≠fica
 * - URLs de sucesso/cancelamento s√£o personaliz√°veis
 */
export async function createStripeCheckoutSession(data: CreateCheckoutSessionData): Promise<CheckoutSessionResult> {
  await logToNetworkChrome('STRIPE_CHECKOUT', 'CREATE_SESSION_INICIADO', data);
  
  try {
    console.log('üÜï [SERVER-STRIPE] Criando sess√£o de checkout na conta conectada:', data.accountId);
    console.log('üì¶ [SERVER-STRIPE] Dados da sess√£o:', {
      priceId: data.priceId,
      courseId: data.courseId,
      buyerId: data.buyerId
    });
    
    // Preparar par√¢metros para criar sess√£o de checkout
    const sessionParams: Stripe.Checkout.SessionCreateParams = {
      line_items: [{
        price: data.priceId,
        quantity: 1
      }],
      mode: 'payment',
      success_url: data.successUrl,
      cancel_url: data.cancelUrl,
      customer_email: data.buyerEmail,
      metadata: {
        course_id: data.courseId,
        buyer_id: data.buyerId,
        mentor_id: data.mentorId
      },
      locale: 'pt-BR' as const
    };

    // üéØ CORRE√á√ÉO CR√çTICA: Criar sess√£o na conta conectada espec√≠fica
    const session = await stripe.checkout.sessions.create(sessionParams, {
      stripeAccount: data.accountId  // üî• ESSENCIAL: Especificar conta conectada
    });
    
    console.log('‚úÖ [SERVER-STRIPE] Sess√£o de checkout criada na conta conectada:', session.id);
    
    const result = {
      success: true,
      sessionId: session.id,
      sessionUrl: session.url || undefined,
      transactionId: undefined // Ser√° preenchido pelo frontend quando criar a transa√ß√£o
    };
    
    await logToNetworkChrome('STRIPE_CHECKOUT', 'CREATE_SESSION_SUCESSO', {
      account_id: data.accountId,
      session_id: session.id,
      session_url: session.url,
      course_id: data.courseId,
      buyer_id: data.buyerId
    });
    
    return result;
    
  } catch (error) {
    const errorResult = {
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido ao criar sess√£o de checkout'
    };
    await logToNetworkChrome('STRIPE_CHECKOUT', 'CREATE_SESSION_ERRO', { 
      accountId: data.accountId, 
      error: errorResult.error 
    });
    return errorResult;
  }
}

/**
 * Verificar sess√£o de checkout no Stripe
 * 
 * üìö EDUCATIVO PARA DEV JUNIOR:
 * - accountId: ID da conta conectada onde a sess√£o foi criada (obrigat√≥rio)
 * - sessionId: ID da sess√£o de checkout (obrigat√≥rio)
 * - Retorna detalhes completos da sess√£o incluindo payment_intent
 */
export async function verifyStripeCheckoutSession(accountId: string, sessionId: string): Promise<CheckoutSuccessResult> {
  await logToNetworkChrome('STRIPE_CHECKOUT', 'VERIFY_SESSION_INICIADO', { accountId, sessionId });
  
  try {
    console.log('üîç [SERVER-STRIPE] Verificando sess√£o na conta conectada:', accountId);
    console.log('üì¶ [SERVER-STRIPE] Session ID:', sessionId);
    
    // üéØ CORRE√á√ÉO CR√çTICA: Verificar sess√£o na conta conectada espec√≠fica
    const session = await stripe.checkout.sessions.retrieve(
      sessionId, 
      {
        expand: ['payment_intent', 'line_items']
      },
      {
        stripeAccount: accountId  // üî• ESSENCIAL: Especificar conta conectada
      }
    );
    
    console.log('‚úÖ [SERVER-STRIPE] Sess√£o verificada:', {
      id: session.id,
      payment_status: session.payment_status,
      amount_total: session.amount_total
    });
    
    const result = {
      success: true,
      transaction: {
        session_id: session.id,
        payment_status: session.payment_status,
        payment_intent_id: typeof session.payment_intent === 'string' 
          ? session.payment_intent 
          : session.payment_intent?.id,
        amount_total: session.amount_total,
        currency: session.currency,
        customer_email: session.customer_email,
        metadata: session.metadata
      }
    };
    
    await logToNetworkChrome('STRIPE_CHECKOUT', 'VERIFY_SESSION_SUCESSO', {
      account_id: accountId,
      session_id: session.id,
      payment_status: session.payment_status,
      amount_total: session.amount_total
    });
    
    return result;
    
  } catch (error) {
    const errorResult = {
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido ao verificar sess√£o de checkout'
    };
    await logToNetworkChrome('STRIPE_CHECKOUT', 'VERIFY_SESSION_ERRO', { 
      accountId, 
      sessionId,
      error: errorResult.error 
    });
    return errorResult;
  }
}

/**
 * Verificar status de pagamento espec√≠fico
 * 
 * üìö EDUCATIVO PARA DEV JUNIOR:
 * - accountId: ID da conta conectada (obrigat√≥rio)
 * - paymentIntentId: ID do payment intent (obrigat√≥rio)
 * - Verifica se o pagamento foi processado com sucesso
 */
export async function verifyStripePaymentStatus(accountId: string, paymentIntentId: string): Promise<PaymentStatusResult> {
  await logToNetworkChrome('STRIPE_CHECKOUT', 'VERIFY_PAYMENT_INICIADO', { accountId, paymentIntentId });
  
  try {
    console.log('üí∞ [SERVER-STRIPE] Verificando payment intent na conta conectada:', accountId);
    console.log('üì¶ [SERVER-STRIPE] Payment Intent ID:', paymentIntentId);
    
    // üéØ CORRE√á√ÉO CR√çTICA: Verificar payment intent na conta conectada espec√≠fica
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId, {}, {
      stripeAccount: accountId  // üî• ESSENCIAL: Especificar conta conectada
    });
    
    console.log('‚úÖ [SERVER-STRIPE] Payment intent verificado:', {
      id: paymentIntent.id,
      status: paymentIntent.status,
      amount: paymentIntent.amount
    });
    
    const isPaid = paymentIntent.status === 'succeeded';
    
    const result = {
      success: true,
      isPaid,
      status: paymentIntent.status,
      transaction: {
        payment_intent_id: paymentIntent.id,
        status: paymentIntent.status,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency,
        created: paymentIntent.created,
        metadata: paymentIntent.metadata
      }
    };
    
    await logToNetworkChrome('STRIPE_CHECKOUT', 'VERIFY_PAYMENT_SUCESSO', {
      account_id: accountId,
      payment_intent_id: paymentIntent.id,
      status: paymentIntent.status,
      is_paid: isPaid,
      amount: paymentIntent.amount
    });
    
    return result;
    
  } catch (error) {
    const errorResult = {
      success: false,
      isPaid: false,
      status: 'error',
      error: error instanceof Error ? error.message : 'Erro desconhecido ao verificar payment intent'
    };
    await logToNetworkChrome('STRIPE_CHECKOUT', 'VERIFY_PAYMENT_ERRO', { 
      accountId, 
      paymentIntentId,
      error: errorResult.error 
    });
    return errorResult;
  }
}

/**
 * Listar sess√µes de checkout de uma conta
 * 
 * üìö EDUCATIVO PARA DEV JUNIOR:
 * - accountId: ID da conta conectada (obrigat√≥rio)
 * - Lista todas as sess√µes de checkout criadas na conta
 * - √ötil para auditoria e debug
 */
export async function listStripeCheckoutSessions(accountId: string, options: { limit?: number } = {}): Promise<{ success: boolean; sessions?: Stripe.Checkout.Session[]; error?: string }> {
  await logToNetworkChrome('STRIPE_CHECKOUT', 'LIST_SESSIONS_INICIADO', { accountId, options });
  
  try {
    console.log('üìã [SERVER-STRIPE] Listando sess√µes de checkout da conta conectada:', accountId);
    
    // üéØ CORRE√á√ÉO CR√çTICA: Listar sess√µes na conta conectada espec√≠fica
    const sessions = await stripe.checkout.sessions.list({
      limit: options.limit || 100
    }, {
      stripeAccount: accountId  // üî• ESSENCIAL: Especificar conta conectada
    });
    
    console.log(`‚úÖ [SERVER-STRIPE] ${sessions.data.length} sess√µes encontradas na conta conectada`);
    
    const result = { success: true, sessions: sessions.data };
    await logToNetworkChrome('STRIPE_CHECKOUT', 'LIST_SESSIONS_SUCESSO', {
      account_id: accountId,
      count: sessions.data.length,
      sessions: sessions.data.map(s => ({ 
        id: s.id, 
        payment_status: s.payment_status,
        amount_total: s.amount_total 
      }))
    });
    
    return result;
    
  } catch (error) {
    const errorResult = {
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido ao listar sess√µes de checkout'
    };
    await logToNetworkChrome('STRIPE_CHECKOUT', 'LIST_SESSIONS_ERRO', { 
      accountId, 
      error: errorResult.error 
    });
    return errorResult;
  }
}

export { stripe };
