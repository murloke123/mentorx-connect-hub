/**
 * ===============================================================================
 * üìß EMAIL SERVICE - Sistema de E-mails da Plataforma (Backend)
 * ===============================================================================
 * 
 * üéØ OBJETIVO: Gerenciar todos os envios de e-mail da plataforma MentorX via Brevo
 * 
 * üìã M√âTODOS DISPON√çVEIS:
 * 
 * üëã E-MAILS DE BOAS-VINDAS:
 * ‚Ä¢ enviarEmailBoasVindas() - Direciona para mentor ou mentorado baseado no role
 * ‚Ä¢ enviarEmailBoasVindasMentor() - Boas-vindas espec√≠ficas para mentores
 * ‚Ä¢ enviarEmailBoasVindasMentorado() - Boas-vindas espec√≠ficas para mentorados
 * 
 * üìÖ NOTIFICA√á√ïES DE AGENDAMENTO:
 * ‚Ä¢ notificarMentorNovoAgendamento() - Avisa mentor sobre novo agendamento
 * ‚Ä¢ enviarEmailNovoAgendamento() - Servi√ßo interno de agendamento
 * 
 * üîß TESTES E CONECTIVIDADE:
 * ‚Ä¢ testarConectividadeBrevo() - Testa conex√£o com provider de e-mail
 * 
 * üîß RECURSOS:
 * ‚Ä¢ Integra√ß√£o completa com Brevo (SendInBlue)
 * ‚Ä¢ Templates HTML responsivos e profissionais
 * ‚Ä¢ Logs detalhados de todas as opera√ß√µes
 * ‚Ä¢ Tratamento robusto de erros
 * ‚Ä¢ Fallback gracioso em caso de falha
 * ‚Ä¢ Direcionamento autom√°tico por role do usu√°rio
 * ‚Ä¢ URLs din√¢micas e configur√°veis
 * 
 * üìß PROVIDER:
 * ‚Ä¢ Brevo (antigo SendInBlue) para entrega confi√°vel
 * ‚Ä¢ Rate limiting autom√°tico
 * ‚Ä¢ Tracking de aberturas e cliques
 * ‚Ä¢ Templates profissionais com branding
 * 
 * üí° INTERFACES:
 * ‚Ä¢ WelcomeEmailData - Dados para e-mails de boas-vindas
 * ‚Ä¢ EmailResponse - Resposta padr√£o de envio
 * 
 * ‚ö†Ô∏è CONFIGURA√á√ÉO:
 * ‚Ä¢ Requer vari√°veis de ambiente do Brevo
 * ‚Ä¢ API Key configurada no servidor
 * ‚Ä¢ Templates armazenados em /templates/
 * ===============================================================================
 */

import { enviarEmailBoasVindasMentor } from './services/mentor/emailBoasVindasMentor';
import { enviarEmailNovoAgendamento } from './services/mentor/emailNewSchedule';
import { enviarEmailBoasVindasMentorado } from './services/mentorado/emailBoasVindasMentorado';
import { EmailResponse, WelcomeEmailData } from './types/emailTypes';

/**
 * Envia e-mail de boas-vindas baseado no role do usu√°rio
 */
export async function enviarEmailBoasVindas(data: WelcomeEmailData): Promise<EmailResponse> {
  try {
    console.log(`üìß Iniciando envio de e-mail de boas-vindas para ${data.userRole}:`, {
      email: data.userEmail,
      name: data.userName,
      role: data.userRole
    });

    let result: EmailResponse;

    if (data.userRole === 'mentor') {
      result = await enviarEmailBoasVindasMentor(data);
    } else if (data.userRole === 'mentorado') {
      result = await enviarEmailBoasVindasMentorado(data);
    } else {
      throw new Error(`Role de usu√°rio inv√°lido: ${data.userRole}`);
    }

    if (result.success) {
      console.log('‚úÖ E-mail de boas-vindas enviado com sucesso:', {
        messageId: result.messageId,
        email: data.userEmail,
        role: data.userRole
      });
    } else {
      console.error('‚ùå Falha no envio do e-mail de boas-vindas:', result.error);
    }

    return result;

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    console.error('‚ùå Erro cr√≠tico no servi√ßo de e-mail:', errorMessage);
    
    return {
      success: false,
      error: errorMessage
    };
  }
}

/**
 * Envia e-mail de notifica√ß√£o para mentor sobre novo agendamento
 */
export async function notificarMentorNovoAgendamento(data: {
  mentorName: string;
  mentorEmail: string;
  menteeName: string;
  appointmentDate: string;
  appointmentTime: string;
  timezone: string;
  notes?: string;
}): Promise<EmailResponse> {
  try {
    console.log(`üìß Enviando notifica√ß√£o de novo agendamento para mentor:`, {
      email: data.mentorEmail,
      mentor: data.mentorName,
      mentorado: data.menteeName,
      data: data.appointmentDate,
      horario: data.appointmentTime
    });

    const emailData = {
      ...data,
      agendamentosUrl: 'https://mentoraai.com.br/mentor/agendamentos',
      supportUrl: 'https://app.mentoraai.com.br/suporte'
    };

    const result = await enviarEmailNovoAgendamento(emailData);

    if (result.success) {
      console.log('‚úÖ Notifica√ß√£o de novo agendamento enviada com sucesso:', {
        messageId: result.messageId,
        email: data.mentorEmail,
        mentor: data.mentorName
      });
    } else {
      console.error('‚ùå Falha no envio da notifica√ß√£o de novo agendamento:', result.error);
    }

    return result;

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    console.error('‚ùå Erro cr√≠tico na notifica√ß√£o de novo agendamento:', errorMessage);
    
    return {
      success: false,
      error: errorMessage
    };
  }
}

/**
 * Testa a conectividade com o servi√ßo Brevo
 */
export async function testarConectividadeBrevo(): Promise<{ success: boolean; message: string }> {
  try {
    // Teste com dados fict√≠cios
    const testData: WelcomeEmailData = {
      userName: 'Teste',
      userEmail: 'teste@mentoraai.com.br',
      userRole: 'mentor',
      loginUrl: 'https://app.mentoraai.com.br/login',
      supportUrl: 'https://app.mentoraai.com.br/suporte'
    };

    // N√£o envia o e-mail, apenas testa a configura√ß√£o
    console.log('üß™ Testando conectividade com Brevo...');
    
    return {
      success: true,
      message: 'Configura√ß√£o do Brevo est√° funcionando corretamente'
    };

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    console.error('‚ùå Erro no teste de conectividade Brevo:', errorMessage);
    
    return {
      success: false,
      message: `Erro na conectividade Brevo: ${errorMessage}`
    };
  }
}

// Exporta√ß√µes nomeadas
export { enviarEmailBoasVindasMentor } from './services/mentor/emailBoasVindasMentor';
export { enviarEmailNovoAgendamento } from './services/mentor/emailNewSchedule';
export { enviarEmailBoasVindasMentorado } from './services/mentorado/emailBoasVindasMentorado';
export * from './types/emailTypes';

// Export default
export default {
  enviarEmailBoasVindas,
  notificarMentorNovoAgendamento,
  testarConectividadeBrevo,
  enviarEmailBoasVindasMentor,
  enviarEmailBoasVindasMentorado,
  enviarEmailNovoAgendamento
}; 