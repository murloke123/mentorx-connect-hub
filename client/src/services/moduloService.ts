/**
 * ===============================================================================
 * üìö M√ìDULO SERVICE - Gerenciamento de M√≥dulos de Cursos
 * ===============================================================================
 * 
 * üéØ OBJETIVO: Gerenciar m√≥dulos dentro dos cursos (estrutura hier√°rquica)
 * 
 * üìã M√âTODOS DISPON√çVEIS:
 * 
 * üîç CONSULTA DE M√ìDULOS:
 * ‚Ä¢ getModulosByCursoId() - Lista todos os m√≥dulos de um curso
 * ‚Ä¢ getModuloById() - Busca m√≥dulo espec√≠fico por ID
 * 
 * ‚úèÔ∏è CRIA√á√ÉO E EDI√á√ÉO:
 * ‚Ä¢ criarModulo() - Cria novo m√≥dulo em um curso
 * ‚Ä¢ editarModulo() - Edita m√≥dulo existente (interface espec√≠fica)
 * ‚Ä¢ atualizarModulo() - Atualiza m√≥dulo existente (interface flex√≠vel)
 * 
 * üóëÔ∏è EXCLUS√ÉO E ORGANIZA√á√ÉO:
 * ‚Ä¢ deletarModulo() - Remove m√≥dulo do curso
 * ‚Ä¢ reordenarModulos() - Reordena lista de m√≥dulos por drag&drop
 * 
 * üîß RECURSOS:
 * ‚Ä¢ Sistema autom√°tico de ordena√ß√£o (order_index)
 * ‚Ä¢ Gest√£o autom√°tica da pr√≥xima ordem dispon√≠vel
 * ‚Ä¢ Toast notifications para feedback do usu√°rio
 * ‚Ä¢ Tratamento robusto de erros
 * ‚Ä¢ TypeScript completo com interfaces tipadas
 * ‚Ä¢ Valida√ß√£o autom√°tica de dados
 * 
 * üìù ESTRUTURA HIER√ÅRQUICA:
 * ‚Ä¢ Curso ‚Üí M√≥dulo ‚Üí Conte√∫do
 * ‚Ä¢ M√≥dulos organizam conte√∫dos em se√ß√µes l√≥gicas
 * ‚Ä¢ Order_index determina ordem de exibi√ß√£o
 * 
 * üí° INTERFACES:
 * ‚Ä¢ Modulo - Estrutura completa do m√≥dulo
 * ‚Ä¢ CriarModuloData - Dados para cria√ß√£o
 * ‚Ä¢ EditarModuloData - Dados para edi√ß√£o completa
 * ‚Ä¢ AtualizarModuloData - Dados para atualiza√ß√£o parcial
 * 
 * üîÑ FLUXO T√çPICO:
 * 1. getModulosByCursoId() - Carrega m√≥dulos do curso
 * 2. criarModulo() - Adiciona novo m√≥dulo
 * 3. reordenarModulos() - Organiza ordem
 * 4. editarModulo() / atualizarModulo() - Modifica existente
 * 5. deletarModulo() - Remove se necess√°rio
 * ===============================================================================
 */

import { toast } from "@/hooks/use-toast";
import { supabase } from "@/utils/supabase";

export interface Modulo {
  id: string;
  course_id: string;
  title: string;
  description?: string;
  order_index: number;
  created_at: string;
  updated_at: string;
}

// Interface para cria√ß√£o de m√≥dulo
export interface CriarModuloData {
  course_id: string;
  title: string;
  description?: string;
  order_index?: number;
}

// Buscar m√≥dulos por curso
export async function getModulosByCursoId(cursoId: string): Promise<Modulo[]> {
  try {
    const { data, error } = await supabase
      .from("modulos")
      .select("*")
      .eq("course_id", cursoId)
      .order("order_index", { ascending: true });

    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error("Erro ao buscar m√≥dulos:", error);
    toast({
      title: "Erro ao carregar m√≥dulos",
      description: "N√£o foi poss√≠vel carregar os m√≥dulos deste curso.",
      variant: "destructive",
    });
    return [];
  }
}

// Buscar m√≥dulo por ID
export async function getModuloById(id: string): Promise<Modulo | null> {
  try {
    const { data, error } = await supabase
      .from("modulos")
      .select("*")
      .eq("id", id)
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error("Erro ao buscar m√≥dulo:", error);
    toast({
      title: "Erro ao carregar m√≥dulo",
      description: "N√£o foi poss√≠vel carregar os detalhes do m√≥dulo.",
      variant: "destructive",
    });
    return null;
  }
}

// Criar novo m√≥dulo
export async function criarModulo(dados: CriarModuloData): Promise<Modulo | null> {
  try {
    // Buscar a pr√≥xima ordem
    const { data: modulosExistentes } = await supabase
      .from("modulos")
      .select("order_index")
      .eq("course_id", dados.course_id)
      .order("order_index", { ascending: false })
      .limit(1);

    const proximaOrdem = modulosExistentes && modulosExistentes.length > 0 
      ? (modulosExistentes[0].order_index || 0) + 1 
      : 1;

    const { data, error } = await supabase
      .from("modulos")
      .insert({
        course_id: dados.course_id,
        title: dados.title,
        description: dados.description,
        order_index: dados.order_index ?? proximaOrdem,
      })
      .select()
      .single();

    if (error) throw error;
    
    toast({
      title: "M√≥dulo criado com sucesso",
      description: "O m√≥dulo foi adicionado ao curso.",
    });
    
    return data;
  } catch (error) {
    console.error("Erro ao criar m√≥dulo:", error);
    toast({
      title: "Erro ao criar m√≥dulo",
      description: "N√£o foi poss√≠vel criar o m√≥dulo. Tente novamente.",
      variant: "destructive",
    });
    return null;
  }
}

// Interface para edi√ß√£o de m√≥dulo
export interface EditarModuloData {
  id: string;
  course_id: string;
  title: string;
  description?: string;
}

// Editar m√≥dulo
export async function editarModulo(dados: EditarModuloData): Promise<Modulo | null> {
  try {
    const { data, error } = await supabase
      .from("modulos")
      .update({
        title: dados.title,
        description: dados.description,
      })
      .eq("id", dados.id)
      .select()
      .single();

    if (error) throw error;
    
    toast({
      title: "M√≥dulo atualizado",
      description: "As altera√ß√µes foram salvas com sucesso.",
    });
    
    return data;
  } catch (error) {
    console.error("Erro ao editar m√≥dulo:", error);
    toast({
      title: "Erro ao editar m√≥dulo",
      description: "N√£o foi poss√≠vel salvar as altera√ß√µes. Tente novamente.",
      variant: "destructive",
    });
    return null;
  }
}

// Interface para atualiza√ß√£o de m√≥dulo
export interface AtualizarModuloData {
  title?: string;
  description?: string;
}

// Atualizar m√≥dulo
export async function atualizarModulo(id: string, dados: AtualizarModuloData): Promise<Modulo | null> {
  try {
    const { data, error } = await supabase
      .from("modulos")
      .update(dados)
      .eq("id", id)
      .select()
      .single();

    if (error) throw error;
    
    toast({
      title: "M√≥dulo atualizado",
      description: "As altera√ß√µes foram salvas com sucesso.",
    });
    
    return data;
  } catch (error) {
    console.error("Erro ao atualizar m√≥dulo:", error);
    toast({
      title: "Erro ao atualizar m√≥dulo",
      description: "N√£o foi poss√≠vel salvar as altera√ß√µes. Tente novamente.",
      variant: "destructive",
    });
    return null;
  }
}

// Deletar m√≥dulo
export async function deletarModulo(id: string): Promise<boolean> {
  try {
    const { error } = await supabase
      .from("modulos")
      .delete()
      .eq("id", id);

    if (error) throw error;
    
    toast({
      title: "M√≥dulo exclu√≠do",
      description: "O m√≥dulo foi removido com sucesso.",
    });
    
    return true;
  } catch (error) {
    console.error("Erro ao excluir m√≥dulo:", error);
    toast({
      title: "Erro ao excluir m√≥dulo",
      description: "N√£o foi poss√≠vel excluir o m√≥dulo. Tente novamente.",
      variant: "destructive",
    });
    return false;
  }
}

// Reordenar m√≥dulos
export async function reordenarModulos(
  cursoId: string,
  ordenacao: { id: string; order_index: number }[]
): Promise<boolean> {
  try {
    for (const item of ordenacao) {
      const { error } = await supabase
        .from("modulos")
        .update({ order_index: item.order_index })
        .eq("id", item.id);
      
      if (error) throw error;
    }
    
    toast({
      title: "M√≥dulos reordenados",
      description: "A nova ordem dos m√≥dulos foi salva com sucesso.",
    });
    
    return true;
  } catch (error) {
    console.error("Erro ao reordenar m√≥dulos:", error);
    toast({
      title: "Erro ao reordenar m√≥dulos",
      description: "N√£o foi poss√≠vel salvar a nova ordem dos m√≥dulos.",
      variant: "destructive",
    });
    return false;
  }
}
