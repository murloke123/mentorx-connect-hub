/**
 * ===============================================================================
 * üîî NOTIFICATION SERVICE - Sistema de Notifica√ß√µes da Plataforma
 * ===============================================================================
 * 
 * üéØ OBJETIVO: Gerenciar todas as notifica√ß√µes internas da plataforma MentorX
 * 
 * üìã M√âTODOS DISPON√çVEIS:
 * 
 * üîß CORE FUNCTIONS:
 * ‚Ä¢ createNotification() - Cria uma notifica√ß√£o gen√©rica no banco
 * 
 * üìÖ NOTIFICA√á√ïES DE AGENDAMENTO:
 * ‚Ä¢ notifyAppointmentCancellation() - Agendamento cancelado (gen√©rico)
 * ‚Ä¢ notifyScheduleCancelledByMentor() - Cancelamento espec√≠fico do mentor
 * ‚Ä¢ notifyNewAppointment() - Novo agendamento criado
 * 
 * üë• NOTIFICA√á√ïES SOCIAIS:
 * ‚Ä¢ notifyNewFollower() - Novo seguidor adicionado
 * ‚Ä¢ notifyLostFollower() - Seguidor removido/perdido
 * 
 * üéì NOTIFICA√á√ïES EDUCACIONAIS:
 * ‚Ä¢ notifyNewEnrollment() - Nova matr√≠cula em curso
 * ‚Ä¢ notifyCourseUpdate() - Atualiza√ß√£o em curso
 * 
 * üîß RECURSOS:
 * ‚Ä¢ Logs detalhados de todas as opera√ß√µes
 * ‚Ä¢ Valida√ß√£o autom√°tica de dados obrigat√≥rios
 * ‚Ä¢ Tratamento robusto de erros
 * ‚Ä¢ Formata√ß√£o autom√°tica de mensagens
 * ‚Ä¢ Integra√ß√£o direta com tabela notifications
 * ‚Ä¢ Stack trace completo para debug
 * 
 * üìä TIPOS DE NOTIFICA√á√ÉO:
 * ‚Ä¢ new_follower - Novo seguidor
 * ‚Ä¢ lost_follower - Seguidor perdido
 * ‚Ä¢ appointment_cancelled - Agendamento cancelado
 * ‚Ä¢ cancel_schedule - Cancelamento pelo mentor
 * ‚Ä¢ schedule - Novo agendamento
 * ‚Ä¢ new_enrollment - Nova matr√≠cula
 * ‚Ä¢ course_updated - Curso atualizado
 * ‚Ä¢ course_buy - Compra de curso
 * ‚Ä¢ message - Mensagem de mentorado
 * 
 * üí° INTERFACE:
 * ‚Ä¢ CreateNotificationData - Estrutura base para notifica√ß√µes
 * ‚Ä¢ sender_role/receiver_role - Roles autom√°ticos (mentor/mentorado)
 * ‚Ä¢ getUserRole() - Fun√ß√£o utilit√°ria para buscar role do usu√°rio
 * ===============================================================================
 */

import { supabase } from '../utils/supabase';

/**
 * Buscar o role de um usu√°rio pelo ID
 */
async function getUserRole(userId: string): Promise<string | null> {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('‚ùå [NOTIFICATION] Erro ao buscar role do usu√°rio:', error);
      return null;
    }

    return data?.role || null;
  } catch (error) {
    console.error('üí• [NOTIFICATION] Erro ao buscar role do usu√°rio:', error);
    return null;
  }
}

export interface CreateNotificationData {
  receiver_id: string;
  receiver_name: string;
  receiver_role?: string;
  sender_id?: string;
  sender_name?: string;
  sender_role?: string;
  type: 'new_follower' | 'lost_follower' | 'appointment_cancelled' | 'cancel_schedule' | 'schedule' | 'new_enrollment' | 'course_updated' | 'message' | 'course_buy';
  title: string;
  message: string;
}

/**
 * Criar uma nova notifica√ß√£o
 */
export async function createNotification(data: CreateNotificationData) {
  console.log('üîî [NOTIFICATION] Iniciando createNotification');
  console.log('üì¶ [NOTIFICATION] Dados recebidos:', data);
  
  try {
    // Buscar roles automaticamente se n√£o fornecidos
    let receiverRole = data.receiver_role;
    let senderRole = data.sender_role;

    if (!receiverRole) {
      console.log('üîç [NOTIFICATION] Buscando role do receiver:', data.receiver_id);
      receiverRole = await getUserRole(data.receiver_id) || undefined;
    }

    if (data.sender_id && !senderRole) {
      console.log('üîç [NOTIFICATION] Buscando role do sender:', data.sender_id);
      senderRole = await getUserRole(data.sender_id) || undefined;
    }

    const insertData = {
      receiver_id: data.receiver_id,
      receiver_name: data.receiver_name,
      receiver_role: receiverRole,
      sender_id: data.sender_id,
      sender_name: data.sender_name,
      sender_role: senderRole,
      type: data.type,
      title: data.title,
      message: data.message,
      is_read: false,
    };
    
    console.log('üì§ [NOTIFICATION] Dados para inserir no banco:', insertData);
    
    const { data: result, error } = await supabase
      .from('notifications')
      .insert(insertData)
      .select();

    if (error) {
      console.error('‚ùå [NOTIFICATION] Erro do Supabase:', error);
      throw error;
    }

    console.log('‚úÖ [NOTIFICATION] Notifica√ß√£o criada com sucesso:', result);
    return { success: true, data: result };
  } catch (error) {
    console.error('üí• [NOTIFICATION] Erro ao criar notifica√ß√£o:', error);
    console.error('üìã [NOTIFICATION] Stack trace:', error instanceof Error ? error.stack : 'N/A');
    return { success: false, error };
  }
}

/**
 * Notificar sobre cancelamento de agendamento
 */
export async function notifyAppointmentCancellation({
  receiverId,
  receiverName,
  senderName,
  appointmentDate,
  appointmentTime,
  reason,
}: {
  receiverId: string;
  receiverName: string;
  senderName: string;
  appointmentDate: string;
  appointmentTime: string;
  reason?: string;
}) {
  console.log('üìÖ [NOTIFICATION] Criando notifica√ß√£o de cancelamento');
  
  const title = 'Agendamento cancelado';
  const message = `${senderName} cancelou o agendamento de ${appointmentDate} √†s ${appointmentTime}${reason ? `. Motivo: ${reason}` : ''}`;

  return createNotification({
    receiver_id: receiverId,
    receiver_name: receiverName,
    sender_name: senderName,
    type: 'appointment_cancelled',
    title,
    message,
  });
}

/**
 * Notificar sobre cancelamento de agendamento pelo mentor
 */
export async function notifyScheduleCancelledByMentor({
  receiverId,
  receiverName,
  senderId,
  senderName,
  appointmentDate,
  appointmentTime,
  reason,
}: {
  receiverId: string;
  receiverName: string;
  senderId: string;
  senderName: string;
  appointmentDate: string;
  appointmentTime: string;
  reason?: string;
}) {
  console.log('üìÖ [NOTIFICATION] Criando notifica√ß√£o de cancelamento pelo mentor (cancel_schedule)');
  
  const title = 'Agendamento Cancelado';
  const message = `${senderName} cancelou o agendamento de ${appointmentDate} √†s ${appointmentTime}${reason ? `. Motivo: ${reason}` : ''}`;

  return createNotification({
    receiver_id: receiverId,
    receiver_name: receiverName,
    sender_id: senderId,
    sender_name: senderName,
    type: 'cancel_schedule',
    title,
    message,
  });
}

/**
 * Notificar sobre novo seguidor
 */
export async function notifyNewFollower({
  mentorId,
  mentorName,
  followerId,
  followerName,
}: {
  mentorId: string;
  mentorName: string;
  followerId: string;
  followerName: string;
}) {
  console.log('üë• [NOTIFICATION] Criando notifica√ß√£o de novo seguidor');
  console.log('üìã [NOTIFICATION] Par√¢metros recebidos:', {
    mentorId,
    mentorName,
    followerId,
    followerName
  });
  
  const title = 'Novo seguidor!';
  const message = `${followerName} come√ßou a seguir voc√™`;

  console.log('üìù [NOTIFICATION] T√≠tulo e mensagem preparados:', { title, message });

  return createNotification({
    receiver_id: mentorId,
    receiver_name: mentorName,
    receiver_role: 'mentor', // Receptor √© sempre mentor
    sender_id: followerId,
    sender_name: followerName,
    sender_role: 'mentorado', // Quem segue √© sempre mentorado
    type: 'new_follower',
    title,
    message,
  });
}

/**
 * Notificar sobre perda de seguidor
 */
export async function notifyLostFollower({
  mentorId,
  mentorName,
  followerId,
  followerName,
}: {
  mentorId: string;
  mentorName: string;
  followerId: string;
  followerName: string;
}) {
  console.log('üíî [NOTIFICATION] Criando notifica√ß√£o de perda de seguidor');
  console.log('üìã [NOTIFICATION] Par√¢metros recebidos:', {
    mentorId,
    mentorName,
    followerId,
    followerName
  });
  
  const title = 'Seguidor perdido';
  const message = `${followerName} deixou de seguir voc√™`;

  console.log('üìù [NOTIFICATION] T√≠tulo e mensagem preparados:', { title, message });

  return createNotification({
    receiver_id: mentorId,
    receiver_name: mentorName,
    receiver_role: 'mentor', // Receptor √© sempre mentor
    sender_id: followerId,
    sender_name: followerName,
    sender_role: 'mentorado', // Quem deixa de seguir √© sempre mentorado
    type: 'lost_follower',
    title,
    message,
  });
}

/**
 * Notificar sobre nova matr√≠cula
 */
export async function notifyNewEnrollment({
  mentorId,
  mentorName,
  studentId,
  studentName,
  courseName,
}: {
  mentorId: string;
  mentorName: string;
  studentId: string;
  studentName: string;
  courseName: string;
}) {
  console.log('üéì [NOTIFICATION] Criando notifica√ß√£o de nova matr√≠cula');
  
  const title = 'Nova matr√≠cula!';
  const message = `${studentName} se matriculou no curso "${courseName}"`;

  return createNotification({
    receiver_id: mentorId,
    receiver_name: mentorName,
    receiver_role: 'mentor', // Receptor √© sempre mentor
    sender_id: studentId,
    sender_name: studentName,
    sender_role: 'mentorado', // Quem se matricula √© sempre mentorado
    type: 'new_enrollment',
    title,
    message,
  });
}

/**
 * Notificar sobre atualiza√ß√£o de curso
 */
export async function notifyCourseUpdate({
  studentId,
  studentName,
  mentorName,
  courseName,
}: {
  studentId: string;
  studentName: string;
  mentorName: string;
  courseName: string;
}) {
  console.log('üìö [NOTIFICATION] Criando notifica√ß√£o de atualiza√ß√£o de curso');
  
  const title = 'Curso atualizado!';
  const message = `${mentorName} atualizou o curso "${courseName}"`;

  return createNotification({
    receiver_id: studentId,
    receiver_name: studentName,
    receiver_role: 'mentorado', // Receptor √© sempre mentorado
    sender_name: mentorName,
    sender_role: 'mentor', // Quem atualiza curso √© sempre mentor
    type: 'course_updated',
    title,
    message,
  });
} 

/**
 * Notificar sobre novo agendamento
 */
export async function notifyNewAppointment({
  receiverId,
  receiverName,
  senderId,
  senderName,
  appointmentDate,
  appointmentTime,
}: {
  receiverId: string;
  receiverName: string;
  senderId: string;
  senderName: string;
  appointmentDate: string;
  appointmentTime: string;
}) {
  console.log('üìÖ [NOTIFICATION] Criando notifica√ß√£o de novo agendamento');
  
  const title = 'Novo agendamento!';
  const message = `${senderName} agendou uma sess√£o para ${appointmentDate} √†s ${appointmentTime}`;

  return createNotification({
    receiver_id: receiverId,
    receiver_name: receiverName,
    sender_id: senderId,
    sender_name: senderName,
    type: 'schedule',
    title,
    message,
  });
}

/**
 * Notificar sobre compra de curso
 */
export async function notifyCoursePurchase({
  mentorId,
  mentorName,
  buyerId,
  buyerName,
  courseName,
  coursePrice,
}: {
  mentorId: string;
  mentorName: string;
  buyerId: string;
  buyerName: string;
  courseName: string;
  coursePrice: number;
}) {
  console.log('üí∞ [NOTIFICATION] Criando notifica√ß√£o de compra de curso');
  console.log('üìã [NOTIFICATION] Par√¢metros recebidos:', {
    mentorId,
    mentorName,
    buyerId,
    buyerName,
    courseName,
    coursePrice
  });
  
  // üõ°Ô∏è PREVEN√á√ÉO DE DUPLICA√á√ÉO: Verificar se j√° existe notifica√ß√£o similar recente
  try {
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
    
    const { data: existingNotification } = await supabase
      .from('notifications')
      .select('id, created_at')
      .eq('receiver_id', mentorId)
      .eq('sender_id', buyerId)
      .eq('type', 'course_buy')
      .ilike('message', `%${courseName}%`)
      .gte('created_at', fiveMinutesAgo)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (existingNotification) {
      console.log('‚ö†Ô∏è [NOTIFICATION] Notifica√ß√£o de compra duplicada detectada e bloqueada:', {
        existingId: existingNotification.id,
        createdAt: existingNotification.created_at,
        mentorId,
        buyerId,
        courseName
      });
      return { success: true, data: null, message: 'Notifica√ß√£o duplicada bloqueada' };
    }
  } catch (error) {
    // Se der erro na verifica√ß√£o, continuar com a cria√ß√£o (melhor criar duplicada que n√£o criar)
    console.log('‚ö†Ô∏è [NOTIFICATION] Erro ao verificar duplica√ß√£o, continuando:', error);
  }
  
  const title = 'Novo curso vendido!';
  const priceFormatted = new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(coursePrice / 100); // Convertendo de centavos para reais
  
  const message = `${buyerName} comprou o curso "${courseName}" por ${priceFormatted}`;

  console.log('üìù [NOTIFICATION] T√≠tulo e mensagem preparados:', { title, message });

  return createNotification({
    receiver_id: mentorId,
    receiver_name: mentorName,
    receiver_role: 'mentor', // Receptor √© sempre mentor
    sender_id: buyerId,
    sender_name: buyerName,
    sender_role: 'mentorado', // Quem compra √© sempre mentorado
    type: 'course_buy',
    title,
    message,
  });
}