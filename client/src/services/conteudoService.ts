/**
 * ===============================================================================
 * üìù CONTE√öDO SERVICE - Gerenciamento de Conte√∫dos de M√≥dulos
 * ===============================================================================
 * 
 * üéØ OBJETIVO: Gerenciar conte√∫dos dentro dos m√≥dulos dos cursos (texto, v√≠deo, PDF)
 * 
 * üìã M√âTODOS DISPON√çVEIS:
 * 
 * üîç CONSULTA DE CONTE√öDOS:
 * ‚Ä¢ getConteudosByModuloId() - Lista todos os conte√∫dos de um m√≥dulo
 * ‚Ä¢ getConteudoById() - Busca conte√∫do espec√≠fico por ID
 * 
 * ‚úèÔ∏è CRIA√á√ÉO DE CONTE√öDOS:
 * ‚Ä¢ criarConteudoTexto() - Cria conte√∫do de texto rico/HTML
 * ‚Ä¢ criarConteudoVideo() - Cria conte√∫do de v√≠deo externo (YouTube, Vimeo)
 * ‚Ä¢ criarConteudoPDF() - Cria conte√∫do PDF com upload autom√°tico
 * 
 * üîß EDI√á√ÉO E GEST√ÉO:
 * ‚Ä¢ atualizarConteudo() - Atualiza dados de um conte√∫do existente
 * ‚Ä¢ excluirConteudo() - Remove conte√∫do do m√≥dulo
 * ‚Ä¢ reordenarConteudos() - Reordena lista de conte√∫dos por drag&drop
 * 
 * üîß RECURSOS:
 * ‚Ä¢ Sistema autom√°tico de ordena√ß√£o (order_index)
 * ‚Ä¢ Upload autom√°tico de PDFs para Supabase Storage
 * ‚Ä¢ Valida√ß√£o de tipos de conte√∫do
 * ‚Ä¢ Toast notifications para feedback
 * ‚Ä¢ Tratamento robusto de erros
 * ‚Ä¢ TypeScript completo com interfaces
 * 
 * üìö TIPOS DE CONTE√öDO SUPORTADOS:
 * ‚Ä¢ texto_rico - Editor rich text (HTML)
 * ‚Ä¢ video_externo - URLs de v√≠deo (YouTube, Vimeo, etc.)
 * ‚Ä¢ pdf - Arquivos PDF com upload
 * 
 * üí° INTERFACE:
 * ‚Ä¢ Conteudo - Estrutura completa de conte√∫do
 * ‚Ä¢ content_data - Dados espec√≠ficos por tipo de conte√∫do
 * 
 * üîÑ FLUXO T√çPICO:
 * 1. getConteudosByModuloId() - Carrega lista
 * 2. criarConteudo*() - Adiciona novo conte√∫do
 * 3. reordenarConteudos() - Organiza ordem
 * 4. atualizarConteudo() - Edita existente
 * ===============================================================================
 */

import { toast } from '../hooks/use-toast';
import { supabase } from '../utils/supabase';

export interface Conteudo {
  id: string;
  module_id: string;
  title: string;
  description?: string;
  content_type: 'texto_rico' | 'video_externo' | 'pdf' | 'cta_button';
  content_data?: {
    texto?: string;
    video_url?: string;
    pdf_url?: string;
    button_name?: string;
    redirect_url?: string;
    [key: string]: unknown;
  };
  cta_button_name?: string;
  cta_redirect_url?: string;
  order_index: number;
  created_at: string;
  updated_at: string;
}

// Obter todos os conte√∫dos de um m√≥dulo
export async function getConteudosByModuloId(moduloId: string): Promise<Conteudo[]> {
  try {
    const { data, error } = await supabase
      .from("conteudos")
      .select("*")
      .eq("module_id", moduloId)
      .order("order_index", { ascending: true });

    if (error) throw error;
    
    // Garantir que os dados retornados sejam do tipo Conteudo[]
    return (data || []).map(item => ({
      ...item,
      content_type: item.content_type as 'texto_rico' | 'video_externo' | 'pdf' | 'cta_button',
      content_data: item.content_data as Conteudo['content_data']
    }));
  } catch (error) {
    console.error("Erro ao buscar conte√∫dos:", error);
    toast({
      title: "Erro ao carregar conte√∫dos",
      description: "N√£o foi poss√≠vel carregar os conte√∫dos deste m√≥dulo.",
      variant: "destructive",
    });
    return [];
  }
}

// Obter um conte√∫do espec√≠fico por ID
export async function getConteudoById(conteudoId: string): Promise<Conteudo | null> {
  try {
    const { data, error } = await supabase
      .from("conteudos")
      .select("*")
      .eq("id", conteudoId)
      .single();

    if (error) throw error;
    
    if (!data) return null;
    
    return {
      ...data,
      content_type: data.content_type as 'texto_rico' | 'video_externo' | 'pdf' | 'cta_button',
      content_data: data.content_data as Conteudo['content_data']
    };
  } catch (error) {
    console.error("Erro ao buscar conte√∫do:", error);
    toast({
      title: "Erro ao carregar conte√∫do",
      description: "N√£o foi poss√≠vel carregar os detalhes do conte√∫do.",
      variant: "destructive",
    });
    return null;
  }
}

// Criar um novo conte√∫do de texto rico
export async function criarConteudoTexto(dados: {
  module_id: string;
  title: string;
  description?: string;
  texto: string;
}): Promise<Conteudo | null> {
  try {
    // Verificar a ordem m√°xima atual para o m√≥dulo
    const { data: conteudosExistentes } = await supabase
      .from("conteudos")
      .select("order_index")
      .eq("module_id", dados.module_id)
      .order("order_index", { ascending: false })
      .limit(1);

    const novaOrdem = conteudosExistentes && conteudosExistentes.length > 0 
      ? conteudosExistentes[0].order_index + 1 
      : 0;

    const { data, error } = await supabase
      .from("conteudos")
      .insert({
        module_id: dados.module_id,
        title: dados.title,
        description: dados.description,
        content_type: 'texto_rico' as const,
        content_data: {
          texto: dados.texto
        },
        order_index: novaOrdem,
      })
      .select()
      .single();

    if (error) throw error;
    
    toast({
      title: "Conte√∫do criado com sucesso",
      description: "O conte√∫do de texto foi adicionado ao m√≥dulo.",
    });
    
    return {
      ...data,
      content_type: data.content_type as 'texto_rico' | 'video_externo' | 'pdf' | 'cta_button',
      content_data: data.content_data as Conteudo['content_data']
    };
  } catch (error) {
    console.error("Erro ao criar conte√∫do:", error);
    toast({
      title: "Erro ao criar conte√∫do",
      description: "N√£o foi poss√≠vel criar o conte√∫do. Tente novamente.",
      variant: "destructive",
    });
    return null;
  }
}

// Criar um novo conte√∫do de v√≠deo
export async function criarConteudoVideo(dados: {
  module_id: string;
  title: string;
  description?: string;
  video_url: string;
}): Promise<Conteudo | null> {
  try {
    // Verificar a ordem m√°xima atual para o m√≥dulo
    const { data: conteudosExistentes } = await supabase
      .from("conteudos")
      .select("order_index")
      .eq("module_id", dados.module_id)
      .order("order_index", { ascending: false })
      .limit(1);

    const novaOrdem = conteudosExistentes && conteudosExistentes.length > 0 
      ? conteudosExistentes[0].order_index + 1 
      : 0;

    const { data, error } = await supabase
      .from("conteudos")
      .insert({
        module_id: dados.module_id,
        title: dados.title,
        description: dados.description,
        content_type: 'video_externo' as const,
        content_data: {
          video_url: dados.video_url
        },
        order_index: novaOrdem,
      })
      .select()
      .single();

    if (error) throw error;
    
    toast({
      title: "Conte√∫do criado com sucesso",
      description: "O conte√∫do de v√≠deo foi adicionado ao m√≥dulo.",
    });
    
    return {
      ...data,
      content_type: data.content_type as 'texto_rico' | 'video_externo' | 'pdf' | 'cta_button',
      content_data: data.content_data as Conteudo['content_data']
    };
  } catch (error) {
    console.error("Erro ao criar conte√∫do:", error);
    toast({
      title: "Erro ao criar conte√∫do",
      description: "N√£o foi poss√≠vel criar o conte√∫do. Tente novamente.",
      variant: "destructive",
    });
    return null;
  }
}

// Criar um novo conte√∫do de PDF
export async function criarConteudoPDF(dados: {
  module_id: string;
  title: string;
  description?: string;
  pdf_file: File;
}): Promise<Conteudo | null> {
  try {
    // 1. Fazer upload do PDF para o Supabase Storage
    const fileExt = dados.pdf_file.name.split('.').pop();
    const fileName = `${Math.random()}.${fileExt}`;
    const filePath = `pdfs/${dados.module_id}/${fileName}`;

    const { error: uploadError } = await supabase.storage
      .from('mentorxbucket')
      .upload(filePath, dados.pdf_file);

    if (uploadError) {
      throw uploadError;
    }

    // 2. Obter a URL p√∫blica do arquivo
    const { data: publicUrlData } = supabase.storage
      .from('mentorxbucket')
      .getPublicUrl(filePath);

    if (!publicUrlData || !publicUrlData.publicUrl) {
      throw new Error('N√£o foi poss√≠vel obter a URL p√∫blica do PDF.');
    }

    // 3. Salvar informa√ß√µes na tabela conteudos
    const { data: conteudosExistentes } = await supabase
      .from("conteudos")
      .select("order_index")
      .eq("module_id", dados.module_id)
      .order("order_index", { ascending: false })
      .limit(1);

    const novaOrdem = conteudosExistentes && conteudosExistentes.length > 0 
      ? conteudosExistentes[0].order_index + 1 
      : 0;

    const { data, error: insertError } = await supabase
      .from("conteudos")
      .insert({
        module_id: dados.module_id,
        title: dados.title,
        description: dados.description,
        content_type: 'pdf' as const,
        content_data: {
          pdf_url: publicUrlData.publicUrl,
          file_name: dados.pdf_file.name,
          file_size: dados.pdf_file.size,
          storage_path: filePath, // Armazenar o caminho do arquivo para facilitar a exclus√£o
        },
        order_index: novaOrdem,
      })
      .select()
      .single();

    if (insertError) throw insertError;
    
    toast({
      title: "Conte√∫do PDF criado com sucesso",
      description: "O arquivo PDF foi adicionado ao m√≥dulo.",
    });
    
    return {
      ...data,
      content_type: data.content_type as 'pdf', // Garantir o tipo correto
      content_data: data.content_data as Conteudo['content_data']
    };
  } catch (error: unknown) {
    console.error("Erro ao criar conte√∫do PDF:", error);
    toast({
      title: "Erro ao criar conte√∫do PDF",
      description: error instanceof Error ? error.message : "N√£o foi poss√≠vel criar o conte√∫do PDF. Verifique o console para mais detalhes.",
      variant: "destructive",
    });
    return null;
  }
}

// Atualizar um conte√∫do existente de texto rico
export async function atualizarConteudo(
  conteudoId: string,
  dados: {
    title?: string;
    description?: string;
    content_data?: Conteudo['content_data'];
    cta_button_name?: string;
    cta_redirect_url?: string;
  }
): Promise<Conteudo | null> {
  try {
    // Primeiro, obtemos o conte√∫do atual para preservar os dados que n√£o ser√£o alterados
    const { data: conteudoAtual } = await supabase
      .from("conteudos")
      .select("content_data")
      .eq("id", conteudoId)
      .single();
    
    // Criar um objeto para armazenar os dados do conte√∫do atualizados
    const dadosConteudoAtuais = conteudoAtual?.content_data as Conteudo['content_data'] || {};
    
    const dadosConteudoAtualizados = {
      ...dadosConteudoAtuais,
      ...dados.content_data
    };
    
    const atualizacoes: Partial<Conteudo> = {};
    if (dados.title !== undefined) atualizacoes.title = dados.title;
    if (dados.description !== undefined) atualizacoes.description = dados.description;
    if (dados.cta_button_name !== undefined) atualizacoes.cta_button_name = dados.cta_button_name;
    if (dados.cta_redirect_url !== undefined) atualizacoes.cta_redirect_url = dados.cta_redirect_url;
    atualizacoes.content_data = dadosConteudoAtualizados;

    const { data, error } = await supabase
      .from("conteudos")
      .update(atualizacoes)
      .eq("id", conteudoId)
      .select()
      .single();

    if (error) throw error;
    
    toast({
      title: "Conte√∫do atualizado",
      description: "As altera√ß√µes foram salvas com sucesso.",
    });
    
    return {
      ...data,
      content_type: data.content_type as 'texto_rico' | 'video_externo' | 'pdf' | 'cta_button',
      content_data: data.content_data as Conteudo['content_data']
    };
  } catch (error) {
    console.error("Erro ao atualizar conte√∫do:", error);
    toast({
      title: "Erro ao atualizar conte√∫do",
      description: "N√£o foi poss√≠vel salvar as altera√ß√µes. Tente novamente.",
      variant: "destructive",
    });
    return null;
  }
}

// Excluir um conte√∫do
export async function excluirConteudo(conteudoId: string): Promise<boolean> {
  try {
    // 1. Primeiro, obtemos os dados do conte√∫do para verificar se √© um PDF
    const { data: conteudo } = await supabase
      .from("conteudos")
      .select("*")
      .eq("id", conteudoId)
      .single();

    if (!conteudo) {
      throw new Error("Conte√∫do n√£o encontrado");
    }

    // 2. Se for um PDF, precisamos excluir o arquivo do storage
    if (conteudo.content_type === 'pdf' && conteudo.content_data) {
      const dados = conteudo.content_data as { storage_path?: string };
      
      // Verificar se temos o caminho do arquivo no storage
      if (dados.storage_path) {
        const { error: deleteFileError } = await supabase.storage
          .from('mentorxbucket')
          .remove([dados.storage_path]);
        
        if (deleteFileError) {
          console.error("Erro ao excluir arquivo do storage:", deleteFileError);
          // N√£o interrompemos o fluxo para permitir a exclus√£o do registro mesmo se o arquivo falhar
        }
      }
    }

    // 3. Excluir o registro do conte√∫do
    const { error } = await supabase
      .from("conteudos")
      .delete()
      .eq("id", conteudoId);

    if (error) throw error;
    
    toast({
      title: "Conte√∫do exclu√≠do",
      description: "O conte√∫do foi removido com sucesso.",
    });
    
    return true;
  } catch (error) {
    console.error("Erro ao excluir conte√∫do:", error);
    toast({
      title: "Erro ao excluir conte√∫do",
      description: "N√£o foi poss√≠vel excluir o conte√∫do. Tente novamente.",
      variant: "destructive",
    });
    return false;
  }
}

// Reordenar conte√∫dos
export async function reordenarConteudos(
  moduloId: string,
  ordenacao: { id: string; order_index: number }[]
): Promise<boolean> {
  try {
    // Usar uma transa√ß√£o para atualizar todos os conte√∫dos de uma vez
    for (const item of ordenacao) {
      const { error } = await supabase
        .from("conteudos")
        .update({ order_index: item.order_index })
        .eq("id", item.id)
        .eq("module_id", moduloId);
      
      if (error) throw error;
    }
    
    return true;
  } catch (error) {
    console.error("Erro ao reordenar conte√∫dos:", error);
    toast({
      title: "Erro ao reordenar conte√∫dos",
      description: "N√£o foi poss√≠vel salvar a nova ordem dos conte√∫dos.",
      variant: "destructive",
    });
    return false;
  }
}
