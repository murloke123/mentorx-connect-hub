import { supabase } from './supabase';

/**
 * For√ßa a atualiza√ß√£o do status de verifica√ß√£o para um usu√°rio
 * √ötil quando sabemos que a conta Stripe j√° est√° verificada
 */
export const forceUpdateVerificationStatus = async (
  userId: string, 
  status: 'verified' | 'pending' | 'rejected' = 'verified'
): Promise<{ success: boolean; error?: string }> => {
  try {
    console.log('üîÑ For√ßando atualiza√ß√£o do status de verifica√ß√£o...');
    console.log('üìã User ID:', userId);
    console.log('üìã Novo status:', status);
    
    const { error } = await supabase
      .from('profiles')
      .update({
        document_verification_status: status,
        account_already_verified: status === 'verified',
        updated_at: new Date().toISOString()
      })
      .eq('id', userId);

    if (error) {
      console.error('‚ùå Erro ao atualizar status:', error);
      return { success: false, error: error.message };
    }

    console.log('‚úÖ Status de verifica√ß√£o atualizado com sucesso!');
    return { success: true };
    
  } catch (error: any) {
    console.error('‚ùå Erro cr√≠tico:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Busca status atual de verifica√ß√£o de um usu√°rio
 */
export const getVerificationStatus = async (userId: string) => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('id, email, full_name, document_verification_status, account_already_verified, stripe_charges_enabled, stripe_payouts_enabled')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('‚ùå Erro ao buscar status:', error);
      return null;
    }

    console.log('üìä Status atual do usu√°rio:', data);
    return data;
    
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico ao buscar status:', error);
    return null;
  }
};

/**
 * Busca usu√°rio por email e atualiza status
 */
export const updateVerificationByEmail = async (
  email: string, 
  status: 'verified' | 'pending' | 'rejected' = 'verified'
) => {
  try {
    console.log('üîç Buscando usu√°rio por email:', email);
    
    const { data: user, error: fetchError } = await supabase
      .from('profiles')
      .select('id, email, full_name, document_verification_status, account_already_verified')
      .eq('email', email)
      .single();

    if (fetchError || !user) {
      console.error('‚ùå Usu√°rio n√£o encontrado:', email);
      return { success: false, error: 'Usu√°rio n√£o encontrado' };
    }

    console.log('üë§ Usu√°rio encontrado:', user);
    
    return await forceUpdateVerificationStatus(user.id, status);
    
  } catch (error: any) {
    console.error('‚ùå Erro cr√≠tico:', error);
    return { success: false, error: error.message };
  }
};

// Fun√ß√£o global para usar no console do navegador
if (typeof window !== 'undefined') {
  (window as any).updateMentor1Verification = async () => {
    console.log('üöÄ Iniciando atualiza√ß√£o manual para mentor1@teste.com...');
    const result = await updateVerificationByEmail('mentor1@teste.com', 'verified');
    
    if (result.success) {
      console.log('üéâ Sucesso! Recarregue a p√°gina para ver as mudan√ßas.');
      alert('Status atualizado com sucesso! Recarregue a p√°gina.');
    } else {
      console.error('üí• Falha:', result.error);
      alert(`Erro: ${result.error}`);
    }
    
    return result;
  };
  
  // Para debug geral
  (window as any).checkUserVerification = async (email: string) => {
    const { data: user } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', email)
      .single();
    
    console.log('üìä Dados completos do usu√°rio:', user);
    return user;
  };
} 