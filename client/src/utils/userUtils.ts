import { supabase } from './supabase';

/**
 * Busca o role de um usu√°rio pelo ID
 * @param userId - ID do usu√°rio
 * @returns Promise<string | null> - Role do usu√°rio ou null se n√£o encontrado
 */
export async function getUserRole(userId: string): Promise<string | null> {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('‚ùå [getUserRole] Erro ao buscar role do usu√°rio:', error);
      return null;
    }

    return data?.role || null;
  } catch (error) {
    console.error('üí• [getUserRole] Erro inesperado ao buscar role do usu√°rio:', error);
    return null;
  }
}

/**
 * Redireciona para a p√°gina de perfil p√∫blico baseado no role do usu√°rio
 * @param userId - ID do usu√°rio
 * @param navigate - Fun√ß√£o de navega√ß√£o do React Router
 */
export async function redirectToUserProfile(userId: string, navigate?: (path: string) => void) {
  try {
    const userRole = await getUserRole(userId);
    
    if (!userRole) {
      console.error('‚ùå [redirectToUserProfile] N√£o foi poss√≠vel obter o role do usu√°rio');
      return;
    }

    let redirectPath = '';
    
    if (userRole === 'mentor') {
      redirectPath = `/mentor/publicview/${userId}`;
    } else if (userRole === 'mentorado') {
      redirectPath = `/mentorado/publicview/${userId}`;
    } else {
      console.error('‚ùå [redirectToUserProfile] Role n√£o reconhecido:', userRole);
      return;
    }

    console.log('üîÑ [redirectToUserProfile] Redirecionando para:', redirectPath);
    
    if (navigate) {
      navigate(redirectPath);
    } else {
      // Fallback para window.location se navigate n√£o estiver dispon√≠vel
      window.location.href = redirectPath;
    }
  } catch (error) {
    console.error('üí• [redirectToUserProfile] Erro ao redirecionar:', error);
  }
}