/**
 * Teste da API de E-mail Brevo
 * Script para testar a conectividade e funcionamento do servi√ßo de e-mail
 */

import { config } from './environment.js';
// Importar diretamente dos arquivos compilados
const { testarConectividadeBrevo, notificarMentorNovoAgendamento, notificarMentoradoNovoAgendamento } = await import('./services/email/emailService.js');

async function testarAPIBrevo() {
  console.log('üß™ INICIANDO TESTE DA API BREVO\n');

  // 1. Verificar configura√ß√µes
  console.log('üìã CONFIGURA√á√ïES:');
  console.log('- BREVO_API_KEY:', config.BREVO_API_KEY ? '‚úÖ Configurada' : '‚ùå N√ÉO configurada');
  console.log('- BREVO_SENDER_EMAIL:', config.BREVO_SENDER_EMAIL);
  console.log('- BREVO_SENDER_NAME:', config.BREVO_SENDER_NAME);
  console.log('');

  // 2. Testar conectividade
  console.log('üîó TESTANDO CONECTIVIDADE:');
  try {
    const connectivityTest = await testarConectividadeBrevo();
    console.log(connectivityTest.success ? '‚úÖ' : '‚ùå', connectivityTest.message);
  } catch (error) {
    console.log('‚ùå Erro na conectividade:', error.message);
  }
  console.log('');

  // 3. Testar notifica√ß√£o de agendamento para mentor
  console.log('üìß TESTANDO NOTIFICA√á√ÉO PARA MENTOR:');
  try {
    const mentorNotificationData = {
      mentorName: 'Jo√£o Silva',
      mentorEmail: 'joao@exemplo.com',
      menteeName: 'Maria Santos',
      appointmentDate: '2025-01-20',
      appointmentTime: '14:00',
      timezone: 'America/Sao_Paulo',
      notes: 'Discuss√£o sobre estrat√©gia de neg√≥cios',
      meetLink: 'https://meet.mentorx.com.br/sala-123'
    };

    const mentorResult = await notificarMentorNovoAgendamento(mentorNotificationData);
    console.log(mentorResult.success ? '‚úÖ' : '‚ùå',
      mentorResult.success ? 'Mentor notificado com sucesso' : `Erro: ${mentorResult.error}`);

    if (mentorResult.messageId) {
      console.log('üìß ID da mensagem:', mentorResult.messageId);
    }
  } catch (error) {
    console.log('‚ùå Erro ao notificar mentor:', error.message);
  }
  console.log('');

  // 4. Testar notifica√ß√£o de agendamento para mentorado
  console.log('üìß TESTANDO NOTIFICA√á√ÉO PARA MENTORADO:');
  try {
    const mentoradoNotificationData = {
      mentorName: 'Jo√£o Silva',
      menteeName: 'Maria Santos',
      menteeEmail: 'maria@exemplo.com',
      appointmentDate: '2025-01-20',
      appointmentTime: '14:00',
      timezone: 'America/Sao_Paulo',
      notes: 'Discuss√£o sobre estrat√©gia de neg√≥cios',
      meetLink: 'https://meet.mentorx.com.br/sala-123'
    };

    const mentoradoResult = await notificarMentoradoNovoAgendamento(mentoradoNotificationData);
    console.log(mentoradoResult.success ? '‚úÖ' : '‚ùå',
      mentoradoResult.success ? 'Mentorado notificado com sucesso' : `Erro: ${mentoradoResult.error}`);

    if (mentoradoResult.messageId) {
      console.log('üìß ID da mensagem:', mentoradoResult.messageId);
    }
  } catch (error) {
    console.log('‚ùå Erro ao notificar mentorado:', error.message);
  }
  console.log('');

  console.log('üéØ TESTE CONCLU√çDO\n');
}

// Executar teste se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testarAPIBrevo().catch(console.error);
}

export default testarAPIBrevo;